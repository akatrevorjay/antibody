// Code generated by go-bindata.
// sources:
// data/shell_init.tmpl
// DO NOT EDIT!

package antibody

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shell_initTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\x4d\x6f\xdb\x38\x10\x3d\x5b\xbf\x62\xa2\x18\x41\xbc\x80\x6c\xec\x35\x8e\x81\xf5\x26\x7b\xd8\x4b\x1b\xa4\x41\x8b\x22\x08\x0c\x9a\x1a\x45\x6c\x68\x52\xe0\x87\x15\x35\xce\x7f\xef\x90\x92\x6c\xa5\x71\x5b\x9d\x44\xf2\xcd\x9b\xaf\x37\x73\x7a\x32\x5b\x0b\x35\xfb\x6e\xcb\x24\x29\xbc\xe2\x4e\x68\x05\x59\xc6\x94\x13\x6b\x9d\x37\x59\x6d\x58\x55\xa1\x39\x9f\xc0\x4b\x32\x5a\xad\x96\x1f\xee\xfe\xff\xf7\xe3\xf5\xd7\xd5\x97\xdb\xe5\xcd\xcd\x7f\xd7\x0b\x67\x3c\x02\xd7\x9b\x0d\x53\x39\xf4\x56\x90\x8e\xff\x49\x93\xd7\x21\xe3\x9e\xd0\x96\x28\x65\x56\x6a\xfd\xd4\x72\x4a\xcd\x99\x84\x2d\x1a\x4b\xb8\x45\xfa\xf2\x32\xfd\xdc\xfe\xbf\xbe\xa6\xc9\x88\x33\x8b\xc4\xf6\x77\x0a\x42\x25\xa3\xd1\x29\xdc\x95\x48\x37\xb6\xd4\x5e\xe6\xb0\x46\xf0\x55\xce\x1c\xe6\xe0\x34\x7c\xf3\xd6\x81\x41\xe7\x8d\x02\x57\x12\x48\x7b\xc3\x11\x98\x64\x04\x94\xba\x8e\xf6\x95\xd1\x5b\x91\x07\x83\x92\x39\x38\x92\x50\x9b\xd1\x34\x82\xaf\xbc\x31\xa8\x9c\x6c\xa0\xc6\x96\x1e\x37\x5e\x92\xbf\x68\x3d\x1d\x04\xd4\xb9\x65\xa0\xb0\x96\x42\x91\x73\xac\x98\x89\x91\x49\x41\x76\xba\x80\x42\x48\xb4\x21\xce\x36\xae\x60\xbd\xf6\x2a\x97\xb8\x6b\x73\x98\xd0\xc5\xe8\xb4\x2e\x09\x46\x74\x8c\xb2\x8b\xaf\x73\xc8\x75\x7c\x19\x75\xf9\xa4\xe3\xf6\x21\x8d\xb7\xb9\x26\x67\x97\x70\x79\xfe\xbe\x67\xb1\x0b\x93\x24\xc0\x88\x95\x97\x90\x59\x48\x43\x54\x52\xa2\x4c\xe1\xec\x0c\xaa\x45\x7f\x84\xdd\x8e\x4e\xcf\xcc\x3c\xda\x80\xff\x05\x19\xec\x60\x5c\x91\x3a\xa8\x5b\x6b\x4d\x59\x1f\xfe\xa4\x85\x4c\x46\x57\xb3\x59\x17\xe7\x6f\x82\xda\x41\xf4\x34\xb0\xe7\xcc\xc5\xfc\xe7\xf3\x24\x56\xf5\x06\x4d\xa1\x37\x54\x4f\x2b\x36\x15\x15\xa4\x44\x26\x5d\x09\xbc\x44\xfe\x04\xba\xed\x2f\x6f\xbb\x03\xa8\xb6\x74\x16\x16\x82\xa8\xa2\x35\xfd\x1b\xaf\x94\x50\x8f\x84\x9d\xc2\x55\xb4\x12\x45\xe8\x62\xa7\x1c\x83\x95\x64\x14\x24\x85\x6a\x51\x6e\xa9\x31\xb5\x20\x7e\xa2\x8d\x04\xa1\xc7\xd4\xb5\x4e\x95\x50\x18\x8a\x25\xb8\xdc\x30\xa1\x80\xe6\x85\x99\x86\x70\x31\x9a\x55\xf0\xda\xb5\x30\xfe\xc7\x3c\x5a\x55\xf7\xc9\xaf\xf6\xf2\x1e\x1f\x2b\x49\xf7\x3a\x49\x13\x18\x7c\xc8\x4b\x0d\xe9\xb2\x1f\xa9\x0e\x74\x01\xe3\x9f\x59\xa3\x10\x5a\xf4\xa7\x30\x5c\xb1\x0e\x03\xfc\x1e\x16\x70\x54\x85\xfb\x7b\x6a\xc2\x3b\x12\x38\x59\xd0\xf5\xfe\xf4\xf0\x30\x0f\x19\x87\xa1\xeb\xc9\xb3\x2c\x1d\x9c\xba\x29\xb5\xc0\x0c\x82\xd2\x24\x71\x1f\x65\x6e\x1b\xc5\xa7\x43\xe0\x6d\x2c\x75\xe8\xc5\xa6\xa1\x5a\x17\xfb\x4a\xf7\x55\xe6\xba\xa2\xf4\x04\xbb\x78\x9b\xff\xa1\x06\x70\x58\x2c\x71\x7b\xac\x84\x12\xae\x75\x71\x6c\xaf\x0c\x40\x01\x53\x88\xa1\xb0\xda\x71\x65\xdc\x79\xd2\x7d\xd3\xcf\x6d\x1d\x96\xc1\x61\xa9\xe0\x33\x72\x1f\x66\x57\x74\x9b\x24\x10\x92\x39\xb5\x4b\x36\xbb\x03\x7d\x6c\xf5\x9f\xe5\xfe\x46\xd9\x4b\xd5\x90\x58\xa9\x1a\x28\x6d\xb7\x54\x2c\xd2\xee\x14\x2e\xe8\xda\x57\xc0\x2c\xe9\x37\x6c\x87\xbf\x26\x70\x7c\xb3\x02\x71\x8d\xd0\x32\x1e\x56\x2c\x93\x82\x2c\xfa\xf7\xc5\xb1\x82\x24\xc9\x8f\x00\x00\x00\xff\xff\x12\x09\x59\x6d\xe6\x05\x00\x00")

func shell_initTmplBytes() ([]byte, error) {
	return bindataRead(
		_shell_initTmpl,
		"shell_init.tmpl",
	)
}

func shell_initTmpl() (*asset, error) {
	bytes, err := shell_initTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shell_init.tmpl", size: 1510, mode: os.FileMode(420), modTime: time.Unix(1454843567, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shell_init.tmpl": shell_initTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"shell_init.tmpl": &bintree{shell_initTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

